!sum
- go: Div
  asm: "V?DIVP[SD]"
  in: &2fp
  - &fp
    go: $t
    base: float
  - *fp
  out: &1fp
  - *fp
- go: DivMasked
  asm: "V?DIVP[SD]"
  in: &1mask2fp
  - class: mask
  - *fp
  - *fp
  out: *1fp
- go: Sqrt
  asm: "V?SQRTP[SD]"
  in: *1fp
  out: *1fp
- go: SqrtMasked
  asm: "V?SQRTP[SD]"
  in: &1mask1fp
  - class: mask
  - *fp
  out: *1fp
- go: ApproximateReciprocalMasked
  asm: "VRCP14P[SD]"
  in: *1mask1fp
  out: *1fp
- go: ApproximateReciprocalOfSqrt
  asm: "V?RSQRTPS"
  in: *1fp
  out: *1fp
- go: ApproximateReciprocalOfSqrtMasked
  asm: "VRSQRT14P[SD]"
  in: *1mask1fp
  out: *1fp
- go: MulByPowOf2Masked
  asm: "VSCALEFP[SD]"
  in: *1mask2fp
  out: *1fp

- go: "Round|Ceil|Floor|Trunc"
  asm: "VROUNDP[SD]"
  in:
  - *fp
  - class: immediate
    const: 0 # place holder
  out: *1fp

- go: "(Round|Ceil|Floor|Trunc)WithPrecisionMasked"
  asm: "VRNDSCALEP[SD]"
  in:
  - class: mask
  - *fp
  - class: immediate
    const: 0 # place holder
    immOffset: 4 # "M", round to numbers with M digits after dot(by means of binary number).
  out: *1fp
- go: "DiffWith(Round|Ceil|Floor|Trunc)WithPrecisionMasked"
  asm: "VREDUCEP[SD]"
  in:
  - class: mask
  - *fp
  - class: immediate
    const: 0 # place holder
    immOffset: 4 # "M", round to numbers with M digits after dot(by means of binary number).
  out: *1fp

- go: "AddSub"
  asm: "VADDSUBP[SD]"
  in:
  - *fp
  - *fp
  out:
  - *fp