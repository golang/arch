!sum
- go: PairDotProd
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // PairDotProd multiplies the elements and add the pairs together,
    // yielding a vector of half as many elements with twice the input element size.
- go: MaskedPairDotProd
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedPairDotProd multiplies the elements and add the pairs together,
    // yielding a vector of half as many elements with twice the input element size.
- go: SaturatedUnsignedSignedPairDotProd
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // SaturatedPairDotProd multiplies the elements and add the pairs together with saturation,
    // yielding a vector of half as many elements with twice the input element size.
- go: MaskedSaturatedUnsignedSignedPairDotProd
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedSaturatedPairDotProd multiplies the elements and add the pairs together with saturation,
    // yielding a vector of half as many elements with twice the input element size.

# QuadDotProd, i.e. VPDPBUSD(S) are operations with src/dst on the same register, we are not supporting this as of now.
- go: DotProdBroadcast
  commutative: "true"
  extension: "AVX.*"
  documentation: !string |-
    // DotProdBroadcast multiplies all elements and broadcasts the sum.
    // Const Immediate = 127.
- go: UnsignedSignedQuadDotProdAccumulate
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // UnsignedSignedQuadDotProdAccumulate performs dot products on groups of 4 elements of y and z and accumulates the results to x.
- go: MaskedUnsignedSignedQuadDotProdAccumulate
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedUnsignedSignedQuadDotProdAccumulate performs dot products on groups of 4 elements of y and z and accumulates the results to x.
- go: SaturatedUnsignedSignedQuadDotProdAccumulate
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // SaturatedUnsignedSignedQuadDotProdAccumulate multiplies performs dot products on groups of 4 elements of y and z and accumulates the results to x.
- go: MaskedSaturatedUnsignedSignedQuadDotProdAccumulate
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // SaturatedUnsignedSignedQuadDotProdAccumulate multiplies performs dot products on groups of 4 elements of y and z and accumulates the results to x.
- go: PairDotProdAccumulate
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // PairDotProdAccumulate performs dot products on pairs of elements of y and z and accumulates the results to x.
- go: MaskedPairDotProdAccumulate
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedPairDotProdAccumulate performs dot products on pairs of elements of y and z and accumulates the results to x.
- go: SaturatedPairDotProdAccumulate
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // SaturatedPairDotProdAccumulate performs dot products on pairs of elements of y and z and accumulates the results to x.
- go: MaskedSaturatedPairDotProdAccumulate
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedSaturatedPairDotProdAccumulate performs dot products on pairs of elements of y and z and accumulates the results to x.
- go: MaskedFusedMultiplyAdd132
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplyAdd132 performs `(v1 * v3) + v2`.
- go: MaskedFusedMultiplyAdd213
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplyAdd213 performs `(v2 * v1) + v3`.
- go: MaskedFusedMultiplyAdd231
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplyAdd231 performs `(v2 * v3) + v1`.
- go: MaskedFusedMultiplySub132
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplySub132 performs `(v1 * v3) - v2`.
- go: MaskedFusedMultiplySub213
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplySub213 performs `(v2 * v1) - v3`.
- go: MaskedFusedMultiplySub231
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplySub231 performs `(v2 * v3) - v1`.
- go: MaskedFusedNegativeMultiplyAdd132
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedNegativeMultiplyAdd132 performs `-(v1 * v3) + v2`.
- go: MaskedFusedNegativeMultiplyAdd213
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedNegativeMultiplyAdd213 performs `-(v2 * v1) + v3`.
- go: MaskedFusedNegativeMultiplyAdd231
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedNegativeMultiplyAdd231 performs `-(v2 * v3) + v1`.
- go: MaskedFusedNegativeMultiplySub132
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedNegativeMultiplySub132 performs `-(v1 * v3) - v2`.
- go: MaskedFusedNegativeMultiplySub213
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedNegativeMultiplySub213 performs `-(v2 * v1) - v3`.
- go: MaskedFusedNegativeMultiplySub231
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedNegativeMultiplySub231 performs `-(v2 * v3) - v1`.
- go: MaskedFusedMultiplyAddSub132
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplyAddSub132 performs `(v1 * v3) - v2` for odd-indexed elements, and `(v1 * v3) + v2` for even-indexed elements.
- go: MaskedFusedMultiplyAddSub213
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplyAddSub213 performs `(v2 * v1) - v3` for odd-indexed elements, and `(v2 * v1) + v3` for even-indexed elements.
- go: MaskedFusedMultiplyAddSub231
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplyAddSub231 performs `(v2 * v3) - v1` for odd-indexed elements, and `(v2 * v3) + v1` for even-indexed elements.
- go: MaskedFusedMultiplySubAdd132
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplySubAdd132 performs `(v1 * v3) + v2` for odd-indexed elements, and `(v1 * v3) - v2` for even-indexed elements.
- go: MaskedFusedMultiplySubAdd213
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplySubAdd213 performs `(v2 * v1) + v3` for odd-indexed elements, and `(v2 * v1) - v3` for even-indexed elements.
- go: MaskedFusedMultiplySubAdd231
  masked: "true"
  commutative: "false"
  extension: "AVX.*"
  documentation: !string |-
    // MaskedFusedMultiplySubAdd231 performs `(v2 * v3) + v1` for odd-indexed elements, and `(v2 * v3) - v1` for even-indexed elements.
