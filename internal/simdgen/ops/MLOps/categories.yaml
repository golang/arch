!sum
- go: PairDotProd
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME multiplies the elements and add the pairs together,
    // yielding a vector of half as many elements with twice the input element size.
# TODO: maybe simplify this name within the receiver-type + method-naming scheme we use.
- go: SaturatedUnsignedSignedPairDotProd
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME multiplies the elements and add the pairs together with saturation,
    // yielding a vector of half as many elements with twice the input element size.
# QuadDotProd, i.e. VPDPBUSD(S) are operations with src/dst on the same register, we are not supporting this as of now.
- go: DotProdBroadcast
  commutative: true
  extension: "AVX.*"
  documentation: !string |-
    // NAME multiplies all elements and broadcasts the sum.
- go: UnsignedSignedQuadDotProdAccumulate
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME performs dot products on groups of 4 elements of x and y and then adds z.
- go: SaturatedUnsignedSignedQuadDotProdAccumulate
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME multiplies performs dot products on groups of 4 elements of x and y and then adds z.
- go: AddDotProd
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME performs dot products on pairs of elements of y and z and then adds x.
- go: SaturatedAddDotProd
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME performs dot products on pairs of elements of y and z and then adds x.
- go: FusedMultiplyAdd
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME performs (x * y) + z.
- go: FusedMultiplyAddSub
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME performs (x * y) - z for odd-indexed elements, and (x * y) + z for even-indexed elements.
- go: FusedMultiplySubAdd
  commutative: false
  extension: "AVX.*"
  documentation: !string |-
    // NAME performs (x * y) + z for odd-indexed elements, and (x * y) - z for even-indexed elements.
